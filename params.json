{
  "name": "ol3-rotate-feature",
  "tagline": "Vector feature Rotate interaction for OpenLayers 3",
  "body": "# Rotate feature interaction for OpenLayers 3\r\n\r\nPlugin adds interaction that allows to rotate vector features around some anchor.\r\n\r\n## Installation\r\n\r\nInstall it thought NPM:\r\n\r\n```shell\r\nnpm install ol3-rotate-feature\r\n```\r\n\r\nOr download the latest version archive and add it with script tag:\r\n\r\n```html\r\n<script src=\"ol3-rotate-feature/dist/bundle.min.js\"></script>\r\n```\r\n\r\n## Usage\r\n\r\nPlugin is packed into UMD wrapper, import it with CommonJS or ES6:\r\n                                 \r\n```js\r\nimport RotateFeature from 'ol3-rotate-feature';\r\nconst RotateFeature = require('ol3-rotate-feature');\r\n```\r\n\r\nIn Browser environment it is available as `ol.interaction.RotateFeature`.\r\n\r\n### Options\r\n\r\n| Option         | Type                                                                        | Description                                                                            |\r\n|:---------------|:----------------------------------------------------------------------------|:---------------------------------------------------------------------------------------|\r\n| features       | _ol.Collection<ol.Feature>_                                                 | The features the interaction works on. Required.                                       |\r\n| style          | _ol.style.Style &#124; Array<ol.style.Style> &#124; ol.style.StyleFunction_ | Style of the overlay with interaction helper features.                                 |\r\n| angleProperty  | _string_                                                                    | Property name where to save current rotation angle. Default is  'angle'.               |\r\n| anchorProperty | _string_                                                                    | Property name where to save current rotation anchor coordinates. Default is  'anchor'. |\r\n\r\n### Events\r\n\r\nAll events triggered by the interaction are instances of `RotateFeatureEvent`.\r\n\r\n##### Members\r\n\r\n- **features**    _ol.Collection_     The features being rotated.\r\n\r\n| Event       | Arguments            | Description                          |\r\n|:------------|:---------------------|:-------------------------------------|\r\n| rotatestart | _RotateFeatureEvent_ | Triggered upon feature rotate start. |\r\n| rotating    | _RotateFeatureEvent_ | Triggered upon feature rotating.     |\r\n| rotateend   | _RotateFeatureEvent_ | Triggered upon feature rotation end. |\r\n\r\n### Example usage:\r\n\r\n```js\r\nimport ol from 'openlayers';\r\nimport * as ol3RotateFeature from 'ol3-rotate-feature';\r\n\r\nconst point = new ol.Feature({\r\n    name: 'point',\r\n    geometry: new ol.geom.Point([2384267.0573564973, 7557371.884852641])\r\n});\r\nconst line = new ol.Feature({\r\n    name: 'line',\r\n    geometry: new ol.geom.LineString([[-603697.2100018249, -239432.60826165066], [4190433.20404443, 2930563.8287811787]])\r\n});\r\nconst polygon = new ol.Feature({\r\n    name: 'polygon',\r\n    geometry: new ol.geom.Polygon([[[-14482348.171434438, 6661491.741627443], [-9541458.663080638, 6221214.458704827], [-11473786.738129886, 3300708.4819848104], [-14482348.171434438, 6661491.741627443]]])\r\n});\r\n\r\nconst map = new ol.Map({\r\n    view: new ol.View({\r\n        center: [0, 0],\r\n        zoom: 2\r\n    }),\r\n    layers: [\r\n        new ol.layer.Tile({\r\n            source: new ol.source.MapQuest({ layer: 'osm' })\r\n        }),\r\n        new ol.layer.Vector({\r\n            source: new ol.source.Vector({\r\n                projection: 'EPSG:33857',\r\n                features: [point, line, polygon]\r\n            })\r\n        })\r\n    ],\r\n    target: 'map',\r\n    projection: 'EPSG:3857'\r\n});\r\n\r\nconst features = new ol.Collection();\r\nconst select = new ol.interaction.Select();\r\nconst rotate = new ol.interaction.RotateFeature({\r\n    features: select.getFeatures()\r\n});\r\n\r\nrotate.on('rotatestart', evt => console.log('rotate start', evt));\r\nrotate.on('rotating', evt => console.log('rotating', evt));\r\nrotate.on('rotateend', evt => console.log('rotate end', evt));\r\n\r\nmap.addInteraction(select);\r\nmap.addInteraction(rotate);\r\n```\r\n\r\nExample of usage in Browser environment in `index.html`.\r\n\r\nGetting total angle or last anchor coordinates after rotation:\r\n\r\n```js\r\nrotate.on('rotateend', evt => {\r\n    evt.features.forEach(feature => {\r\n        // get total angle in radians (positive is counter-clockwise)\r\n        console.log(feature.get('angle') + ' is '+ (-1 * feature.get('angle') * 180 / Math.PI ) + 'Â°');\r\n        // get las anchor coordinates\r\n        console.log(feature.get('anchor'));\r\n    });\r\n});\r\n```\r\n\r\n## License\r\n\r\nMIT (c) 2016, Vladimir Vershinin\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}